# This is a basic workflow to help you get started with Actions

name: Migration Checks

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.1.0
        with:
          fetch-depth: 2
      - uses: jitterbit/get-changed-files@v1
        id: get-changes
        with:
          format: space-delimited
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Fetch the Branch Name 
        run: echo ${{ github.event.pull_request.head.ref }}
        
      - name: Declare Environment Variable 1
        run: echo "BRANCH_NAME_HAS_DB_MIGRATE=false" >> $GITHUB_ENV

      - name: Declare Environment Variable 2
        run: echo "MIGRATION_CHANGES=false" >> $GITHUB_ENV
      
      - name: Declare Environment Variable 3
        run: echo "FEATURE_CHANGES=false" >> $GITHUB_ENV
        
      - name: Branch Has DB_MIGRATE In The Name
        if: startsWith(github.event.pull_request.head.ref, 'db_migrate')
        run: echo "BRANCH_NAME_HAS_DB_MIGRATE=true" >> $GITHUB_ENV
           
      - name: Ensure Migration PR Has No Feature Changes
        if: ${{env.BRANCH_NAME_HAS_DB_MIGRATE}} == "true"
        run: |
          env
          for filename in ${{ steps.get-changes.outputs.added_modified }}; do
            if [[ ! $filename == db/* ]]; then
              echo "FEATURE_CHANGES=true" >> $GITHUB_ENV
            fi
          done
          
      - name: Ensure Feature Change PRs Has No Migrations Changes
        if: ${{env.BRANCH_NAME_HAS_DB_MIGRATE}} == "false"
        run: |
          env
          for filename in ${{ steps.get-changes.outputs.added_modified }}; do
            if [[ $filename == db/* ]]; then
              echo "MIGRATION_CHANGES=true" >> $GITHUB_ENV
            fi
          done
        
      - name: Illegal Action Check 1
        uses: actions/github-script@v3
        if: ${{env.BRANCH_NAME_HAS_DB_MIGRATE}} == true && ${{env.MIGRATION_CHANGES}} == "true" && ${{env.FEATURE_CHANGES}} == "true"
        with:
          script: core.setFailed('This is a Migration PR but also has feature changes which is not allowed!')
            
      - name: Illegal Action Check 2
        uses: actions/github-script@v3
        if: ${{env.BRANCH_NAME_HAS_DB_MIGRATE}} == "false" && ${{env.MIGRATION_CHANGES}} == "true"
        with:
          script: |
            core.setFailed('Illegal Branch Name. Please start the branch name with db_migrate')
            
